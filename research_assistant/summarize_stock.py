import yfinance as yf
import openai
import os
from dotenv import load_dotenv
import streamlit as st

load_dotenv()
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Fetch trending stocks (e.g., S&P 500 top movers)
def fetch_trending_stocks():
    sp500 = yf.Ticker("^GSPC")
    hist = sp500.history(period="1d")
    # For simplicity, use a fixed list of popular stocks as trending
    trending = [
        ("AAPL", "Apple Inc."),
        ("MSFT", "Microsoft Corporation"),
        ("GOOGL", "Alphabet Inc."),
        ("AMZN", "Amazon.com, Inc."),
        ("TSLA", "Tesla, Inc."),
    ]
    return trending

trending_stocks = fetch_trending_stocks()

def suggest_stocks_to_watch(ticker_list=None, custom_prompt=None):
    if not ticker_list and not custom_prompt:
        return "No tickers provided."

    responses = []

    # Split into batches of 5 stocks
    chunks = [ticker_list[i:i + 5] for i in range(0, len(ticker_list), 5)] if ticker_list else [None]

    for i, chunk in enumerate(chunks):
        if custom_prompt and len(chunks) == 1:
            prompt = custom_prompt
        else:
            trending_formatted = "\n".join([f"- {sym} ({name})" for sym, name in chunk])
            prompt = f"""
You are a stock market investment assistant.

Here are the trending stocks:
{trending_formatted}

For each stock above, briefly explain whether it's a good opportunity to watch or invest in now.
Write 1–2 sentences for each in a clean bullet point format.
"""

        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are a helpful stock research assistant."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.7
            )
            responses.append(response.choices[0].message.content.strip())
        except Exception as e:
            responses.append(f"❌ GPT Error (batch {i + 1}): {e}")

    if not responses:
        return "⚠️ No response generated by GPT."

    return "\n".join(responses) if responses else "⚠️ No response generated by GPT."

@st.cache_data(ttl=1800)  # Cache for 30 minutes
def generate_stock_summary(ticker, company_name, current_price, price_change_pct, headlines):
    headline_text = "\n".join(f"- {h}" for h in headlines[:5]) if headlines else ""

    prompt = f"""
You are a stock market assistant.

Stock: {ticker} ({company_name})
Current Price: ${current_price:.2f}
5-Day Price Change: {price_change_pct:+.2f}%

Recent News Headlines:
{headline_text}

Write a brief investment summary and describe the current market mood.
First line should start with 'Market Mood:' followed by the sentiment.
Second line onward should be 'Summary:' followed by key analysis points.
"""

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a helpful financial assistant."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=500
    )

    result = response.choices[0].message.content.strip()

    # Extract mood and summary
    mood = "Neutral"
    summary = result
    if "Market Mood:" in result and "Summary:" in result:
        try:
            mood = result.split("Market Mood:")[1].split("\n")[0].strip()
            summary = result.split("Summary:")[1].strip()
        except:
            pass

    return mood, summary

def compare_risks_between_stocks(tickers):
    tickers_list = ", ".join(tickers)
    prompt = f"""
You are a financial analyst assistant.

Compare the investment risks of the following stocks: {tickers_list}.

Provide a summary of the relative risk factors for each stock in a bullet point list.
"""

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a helpful financial assistant."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=800,
        temperature=0.7
    )
    return response.choices[0].message.content.strip()

